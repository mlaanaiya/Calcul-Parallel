1. MPI (Message Passing Interface) est une bibliothèque de communication pour les programmes parallèles. Elle permet de synchroniser les processus, d'échanger des messages entre les processus, et de coordonner le travail des différents processus. Voici quelques fonctions MPI importantes avec leurs explications et comment les utiliser :

    MPI_Init : Cette fonction initialise l'environnement MPI. Elle doit être appelée avant toute autre fonction MPI.

    Exemple d'utilisation :
    int main(int argc, char** argv) {
        MPI_Init(&argc, &argv);
        // code MPI
        MPI_Finalize();
        return 0;
    }

2. MPI_Comm_size : Cette fonction retourne le nombre de processus qui participent à la communication.

Exemple d'utilisation :


int rank, size;
MPI_Comm_rank(MPI_COMM_WORLD, &rank);
MPI_Comm_size(MPI_COMM_WORLD, &size);

3. MPI_Comm_rank : Cette fonction retourne l'identifiant du processus qui l'appelle.

Exemple d'utilisation :


int rank;
MPI_Comm_rank(MPI_COMM_WORLD, &rank);

4. MPI_Send : Cette fonction envoie un message à un autre processus.

Exemple d'utilisation :


int data = 42;
MPI_Send(&data, 1, MPI_INT, dest, tag, MPI_COMM_WORLD);

5. MPI_Recv : Cette fonction reçoit un message d'un autre processus.

Exemple d'utilisation :


int data;
MPI_Recv(&data, 1, MPI_INT, source, tag, MPI_COMM_WORLD, &status);

6. MPI_Bcast : Cette fonction diffuse un message à tous les processus.

Exemple d'utilisation :


int data = 42;
MPI_Bcast(&data, 1, MPI_INT, root, MPI_COMM_WORLD);


7. MPI_Reduce : Cette fonction agrège des données à partir de tous les processus et les renvoie à un processus désigné.

Exemple d'utilisation :


int data = 42, sum;
MPI_Reduce(&data, &sum, 1, MPI_INT, MPI_SUM, root, MPI_COMM_WORLD);

8. MPI_Barrier : Cette fonction synchronise tous les processus. Chaque processus attend que tous les autres aient atteint la barrière avant de continuer.

Exemple d'utilisation :


MPI_Barrier(MPI_COMM_WORLD);

9. MPI_Allreduce : Cette fonction agrège des données à partir de tous les processus et les renvoie à tous les processus. Elle effectue une opération de réduction (par exemple, une somme) sur les données des processus et renvoie le résultat à tous les processus.

Exemple d'utilisation :


int my_sum, global_sum;
MPI_Allreduce(&my_sum, &global_sum, 1, MPI_INT, MPI_SUM, MPI_COMM_WORLD);

10. MPI_Gather : Cette fonction rassemble les données d'un ensemble de processus et les renvoie à un processus désigné. Chaque processus envoie ses données à un processus racine, qui les rassemble dans un tableau.

Exemple d'utilisation :


int my_data, *global_data;
if (rank == root) {
  global_data = malloc(size * sizeof(int));
}
MPI_Gather(&my_data, 1, MPI_INT, global_data, 1, MPI_INT, root, MPI_COMM_WORLD);

11. MPI_Allgather : Cette fonction rassemble les données d'un ensemble de processus et les renvoie à tous les processus. Chaque processus envoie ses données à tous les autres processus.

Exemple d'utilisation :

int my_data, *global_data;
global_data = malloc(size * sizeof(int));
MPI_Allgather(&my_data, 1, MPI_INT, global_data, 1, MPI_INT, MPI_COMM_WORLD);

12. MPI_Scatter : Cette fonction divise un tableau de données et envoie des morceaux de celui-ci à un ensemble de processus. Chaque processus reçoit une partie des données.

Exemple d'utilisation :


int *global_data, my_data;
if (rank == root) {
  global_data = malloc(size * sizeof(int));
}
MPI_Scatter(global_data, 1, MPI_INT, &my_data, 1, MPI_INT, root, MPI_COMM_WORLD);